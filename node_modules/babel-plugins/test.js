const babel = require('babel-core');
const template = require('babel-template');
const t = require('babel-types');
const fs = require('fs');

const code = `
var obj = {
	a() {
	    return new Promise(function(resolve, reject) {
	        setTimeout(() => {
	            resolve('hehe');
	        }, 1000);
        })
	},
	name: 'cyt',
}

`;

/* ------------------------------------------------------------
 * plugins
 * ------------------------------------------------------------ */

const timeData = fs.readFileSync('./time.js');
const buildTimeFunction = template(`
	 (function (FUNCTION_KEY) {
		 ${timeData.toString()}
		 return promiseTime(REPORT, FUNCTION, NAME)
     })()
 `);

const buildReportFunction = template(`
	 (function (FUNCTION_KEY) {
		 return REPORT_FUNCTION
     })()
 `);

const visitor = {
    // 如果是函数变量声明
    ['FunctionExpression|ArrowFunctionExpression'](path, { opts }) {
        const parentIdentifier = (() => {
            let left = path.parent.left;
            if (path.parent.id)
                return path.parent.id;
            else if (path.parent.key)
                return path.parent.key;
            else if (left && left.type === 'Identifier')
                return left;
            else if (left && left.type === 'MemberExpression')
                return left.property;
            }
        )();

        if (!parentIdentifier)
            return;

        const callName = parentIdentifier.name;
        if (opts.promise.indexOf(callName) === -1)
            return;

        const uid = path.scope.generateUidIdentifier(callName);

        const ast = buildTimeFunction({
			REPORT: buildReportFunction({
				FUNCTION_KEY: uid,
				REPORT_FUNCTION: t.identifier(opts.report.toString())
			}),
            FUNCTION: path.node,
            FUNCTION_KEY: uid,
            NAME: t.stringLiteral(callName)
        });

        path.replaceWith(ast);
    },

    // 如果是函数声明
    FunctionDeclaration(path, { opts }) {
        const parentIdentifier = path.node.id;
        const callName = parentIdentifier.name;
        if (opts.promise.indexOf(callName) === -1)
            return;

        const uid = path.scope.generateUidIdentifier(callName);
        const ast = buildTimeFunction({
            REPORT: buildReportFunction({
				FUNCTION_KEY: uid,
				REPORT_FUNCTION: t.identifier(opts.report.toString())
			}),
            FUNCTION: t.functionExpression(null, [], path.node.body),
            FUNCTION_KEY: uid,
            NAME: t.stringLiteral(callName)
        });

        path.replaceWith(
			t.variableDeclaration('var', [t.variableDeclarator(parentIdentifier, ast.expression)])
		);
    },

    // 如果是对象的属性方法
    ObjectMethod(path, { opts }) {
        if (!t.isObjectMethod(path.node, { kind: 'method' }))
			return;

		const identifier = path.node.key;
		const callName = identifier.name;
		if (opts.promise.indexOf(callName) === -1)
            return;

		const uid = path.scope.generateUidIdentifier(callName);
        const ast = buildTimeFunction({
			REPORT: buildReportFunction({
				FUNCTION_KEY: uid,
				REPORT_FUNCTION: t.identifier(opts.report.toString())
			}),
            FUNCTION: t.functionExpression(null, [], path.node.body),
            FUNCTION_KEY: uid,
            NAME: t.stringLiteral(callName)
        });

		path.replaceWith(
			t.objectProperty(t.identifier(callName), ast.expression)
		);
    },
};

const result = babel.transform(code, {
    plugins: [
        [
            {
                visitor: visitor
            }, {
				report: (durning, args) => console.log('%sms', durning),
                promise: ['a', 'b']
            }
        ]
    ]
});

console.log(result.code);
